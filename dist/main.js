(()=>{"use strict";var n={426:(n,r,e)=>{e.d(r,{Z:()=>d});var t=e(537),o=e.n(t),i=e(645),a=e.n(i),s=e(667),c=e.n(s),l=new URL(e(214),e.b),u=a()(o());u.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Arvo&family=Roboto&display=swap);"]);var A=c()(l);u.push([n.id,":root {\r\n    --arvo: 'Arvo', serif;\r\n    --roboto: 'Roboto', sans-serif;\r\n}\r\n\r\n* {\r\n    padding: 0;\r\n    margin: 0;\r\n    box-sizing: border-box;\r\n    /*border: solid 1px red;*/\r\n}\r\n\r\nbody {\r\n    background-image: url("+A+");\r\n    background-repeat: no-repeat;\r\n    background-size: cover;\r\n    background-position: center;\r\n    color: white;\r\n}\r\n\r\nheader {\r\n    height: 20vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n}\r\n\r\nheader h1 {\r\n    font-family: var(--arvo);\r\n}\r\n\r\nheader h2, header button {\r\n    font-family: var(--roboto);\r\n}\r\n\r\nheader button {\r\n    background-color: transparent;\r\n    border: 2px solid white;\r\n    color: white;\r\n    padding: 4px;\r\n    border-radius: 6px;\r\n    font-size: large;\r\n    cursor: pointer;\r\n    transition: 0.4s;\r\n}\r\n\r\nheader button:hover{\r\n    background-color: white;\r\n    color: black;\r\n}\r\n\r\nmain {\r\n    height: 80vh;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n#board {\r\n    aspect-ratio: 1/1;\r\n    height: min(76vh, 98vw);\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.row {\r\n    display: flex;\r\n}\r\n\r\n.column {\r\n    flex: 1;\r\n    aspect-ratio: 1/1;\r\n    height: calc(min(76vh, 98vw) / 8);\r\n    cursor: pointer;\r\n    color: black;\r\n    text-shadow: 0px 0px 3px #fff, 0px 0px 3px #fff, 0px 0px 3px #fff, 0px 0px 3px #fff, 0px 0px 3px #fff;\r\n    font-size: xx-large;\r\n    font-family: var(--arvo);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n}\r\n\r\n.row:nth-child(even) .column:nth-child(even), .row:nth-child(odd) .column:nth-child(odd) {\r\n\tbackground-color: white;\r\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;IACI,qBAAqB;IACrB,8BAA8B;AAClC;;AAEA;IACI,UAAU;IACV,SAAS;IACT,sBAAsB;IACtB,yBAAyB;AAC7B;;AAEA;IACI,yDAAsE;IACtE,4BAA4B;IAC5B,sBAAsB;IACtB,2BAA2B;IAC3B,YAAY;AAChB;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,6BAA6B;IAC7B,mBAAmB;AACvB;;AAEA;IACI,wBAAwB;AAC5B;;AAEA;IACI,0BAA0B;AAC9B;;AAEA;IACI,6BAA6B;IAC7B,uBAAuB;IACvB,YAAY;IACZ,YAAY;IACZ,kBAAkB;IAClB,gBAAgB;IAChB,eAAe;IACf,gBAAgB;AACpB;;AAEA;IACI,uBAAuB;IACvB,YAAY;AAChB;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,iBAAiB;IACjB,uBAAuB;IACvB,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,OAAO;IACP,iBAAiB;IACjB,iCAAiC;IACjC,eAAe;IACf,YAAY;IACZ,qGAAqG;IACrG,mBAAmB;IACnB,wBAAwB;IACxB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;;AAEvB;;AAEA;CACC,uBAAuB;AACxB",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Arvo&family=Roboto&display=swap');\r\n\r\n:root {\r\n    --arvo: 'Arvo', serif;\r\n    --roboto: 'Roboto', sans-serif;\r\n}\r\n\r\n* {\r\n    padding: 0;\r\n    margin: 0;\r\n    box-sizing: border-box;\r\n    /*border: solid 1px red;*/\r\n}\r\n\r\nbody {\r\n    background-image: url('./assets/pexels-charlie-solorzano-1762815.jpg');\r\n    background-repeat: no-repeat;\r\n    background-size: cover;\r\n    background-position: center;\r\n    color: white;\r\n}\r\n\r\nheader {\r\n    height: 20vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n}\r\n\r\nheader h1 {\r\n    font-family: var(--arvo);\r\n}\r\n\r\nheader h2, header button {\r\n    font-family: var(--roboto);\r\n}\r\n\r\nheader button {\r\n    background-color: transparent;\r\n    border: 2px solid white;\r\n    color: white;\r\n    padding: 4px;\r\n    border-radius: 6px;\r\n    font-size: large;\r\n    cursor: pointer;\r\n    transition: 0.4s;\r\n}\r\n\r\nheader button:hover{\r\n    background-color: white;\r\n    color: black;\r\n}\r\n\r\nmain {\r\n    height: 80vh;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n#board {\r\n    aspect-ratio: 1/1;\r\n    height: min(76vh, 98vw);\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.row {\r\n    display: flex;\r\n}\r\n\r\n.column {\r\n    flex: 1;\r\n    aspect-ratio: 1/1;\r\n    height: calc(min(76vh, 98vw) / 8);\r\n    cursor: pointer;\r\n    color: black;\r\n    text-shadow: 0px 0px 3px #fff, 0px 0px 3px #fff, 0px 0px 3px #fff, 0px 0px 3px #fff, 0px 0px 3px #fff;\r\n    font-size: xx-large;\r\n    font-family: var(--arvo);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n}\r\n\r\n.row:nth-child(even) .column:nth-child(even), .row:nth-child(odd) .column:nth-child(odd) {\r\n\tbackground-color: white;\r\n}"],sourceRoot:""}]);const d=u},645:n=>{n.exports=function(n){var r=[];return r.toString=function(){return this.map((function(r){var e="",t=void 0!==r[5];return r[4]&&(e+="@supports (".concat(r[4],") {")),r[2]&&(e+="@media ".concat(r[2]," {")),t&&(e+="@layer".concat(r[5].length>0?" ".concat(r[5]):""," {")),e+=n(r),t&&(e+="}"),r[2]&&(e+="}"),r[4]&&(e+="}"),e})).join("")},r.i=function(n,e,t,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(t)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var l=0;l<n.length;l++){var u=[].concat(n[l]);t&&a[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),e&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=e):u[2]=e),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),r.push(u))}},r}},667:n=>{n.exports=function(n,r){return r||(r={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),r.hash&&(n+=r.hash),/["'() \t\n]|(%20)/.test(n)||r.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var r=n[1],e=n[3];if(!e)return r;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),i="/*# ".concat(o," */");return[r].concat([i]).join("\n")}return[r].join("\n")}},379:n=>{var r=[];function e(n){for(var e=-1,t=0;t<r.length;t++)if(r[t].identifier===n){e=t;break}return e}function t(n,t){for(var i={},a=[],s=0;s<n.length;s++){var c=n[s],l=t.base?c[0]+t.base:c[0],u=i[l]||0,A="".concat(l," ").concat(u);i[l]=u+1;var d=e(A),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)r[d].references++,r[d].updater(p);else{var f=o(p,t);t.byIndex=s,r.splice(s,0,{identifier:A,updater:f,references:1})}a.push(A)}return a}function o(n,r){var e=r.domAPI(r);return e.update(n),function(r){if(r){if(r.css===n.css&&r.media===n.media&&r.sourceMap===n.sourceMap&&r.supports===n.supports&&r.layer===n.layer)return;e.update(n=r)}else e.remove()}}n.exports=function(n,o){var i=t(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var s=e(i[a]);r[s].references--}for(var c=t(n,o),l=0;l<i.length;l++){var u=e(i[l]);0===r[u].references&&(r[u].updater(),r.splice(u,1))}i=c}}},569:n=>{var r={};n.exports=function(n,e){var t=function(n){if(void 0===r[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}r[n]=e}return r[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(e)}},216:n=>{n.exports=function(n){var r=document.createElement("style");return n.setAttributes(r,n.attributes),n.insert(r,n.options),r}},565:(n,r,e)=>{n.exports=function(n){var r=e.nc;r&&n.setAttribute("nonce",r)}},795:n=>{n.exports=function(n){var r=n.insertStyleElement(n);return{update:function(e){!function(n,r,e){var t="";e.supports&&(t+="@supports (".concat(e.supports,") {")),e.media&&(t+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(t+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),t+=e.css,o&&(t+="}"),e.media&&(t+="}"),e.supports&&(t+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),r.styleTagTransform(t,n,r.options)}(r,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(r)}}}},589:n=>{n.exports=function(n,r){if(r.styleSheet)r.styleSheet.cssText=n;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(n))}}},214:(n,r,e)=>{n.exports=e.p+"136b85fb31c205d1066c.jpg"}},r={};function e(t){var o=r[t];if(void 0!==o)return o.exports;var i=r[t]={id:t,exports:{}};return n[t](i,i.exports,e),i.exports}e.m=n,e.n=n=>{var r=n&&n.__esModule?()=>n.default:()=>n;return e.d(r,{a:r}),r},e.d=(n,r)=>{for(var t in r)e.o(r,t)&&!e.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:r[t]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),e.o=(n,r)=>Object.prototype.hasOwnProperty.call(n,r),(()=>{var n;e.g.importScripts&&(n=e.g.location+"");var r=e.g.document;if(!n&&r&&(r.currentScript&&(n=r.currentScript.src),!n)){var t=r.getElementsByTagName("script");t.length&&(n=t[t.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=n})(),e.b=document.baseURI||self.location.href,e.nc=void 0,(()=>{var n=e(379),r=e.n(n),t=e(795),o=e.n(t),i=e(569),a=e.n(i),s=e(565),c=e.n(s),l=e(216),u=e.n(l),A=e(589),d=e.n(A),p=e(426),f={};f.styleTagTransform=d(),f.setAttributes=c(),f.insert=a().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=u(),r()(p.Z,f),p.Z&&p.Z.locals&&p.Z.locals;const h=e.p+"523bf07d4fda774067f6.svg",x=document.querySelector("body");class v{constructor(n,r,e=null){this.x=n,this.y=r,this.next1=null,this.next2=null,this.next3=null,this.next4=null,this.next5=null,this.next6=null,this.next7=null,this.next8=null,this.prev=e}}function m(n,r,e,t){if(n<1||n>8||r<1||r>8||e<1||e>8||t<1||t>8)return null;const o=new v(n,r),i=[];let a,s=[],c=[];for(y(o),i.push(o),s=b(o),c=s.filter((n=>!i.includes(n)));!a;){for(let n=0;n<c.length;n++)if(c[n].x==e&&c[n].y==t){a=c[n];break}if(!a){for(let n=0;n<c.length;n++)y(c[n]),i.push(c[n]);s=b(o),c=s.filter((n=>!i.includes(n)))}}return a}function y(n){g(n.x+2,n.y-1)&&(n.next1=new v(n.x+2,n.y-1,n)),g(n.x+2,n.y+1)&&(n.next2=new v(n.x+2,n.y+1,n)),g(n.x-2,n.y+1)&&(n.next3=new v(n.x-2,n.y+1,n)),g(n.x-2,n.y-1)&&(n.next4=new v(n.x-2,n.y-1,n)),g(n.x+1,n.y+2)&&(n.next5=new v(n.x+1,n.y+2,n)),g(n.x+1,n.y-2)&&(n.next6=new v(n.x+1,n.y-2,n)),g(n.x-1,n.y+2)&&(n.next7=new v(n.x-1,n.y+2,n)),g(n.x-1,n.y-2)&&(n.next8=new v(n.x-1,n.y-2,n))}function g(n,r){return!(n<1||n>8||r<1||r>8)}function b(n){if(null==n)return;const r=[],e=[];for(e.push(n);e.length>0;){let n=e[0];r.push(n),n.next1&&e.push(n.next1),n.next2&&e.push(n.next2),n.next3&&e.push(n.next3),n.next4&&e.push(n.next4),n.next5&&e.push(n.next5),n.next6&&e.push(n.next6),n.next7&&e.push(n.next7),n.next8&&e.push(n.next8),e.shift()}return r}function B(n){if(n){let r=[];if(r.unshift([n.x,n.y]),n)for(;n.prev;)n=n.prev,r.unshift([n.x,n.y]);return r}return null}let C=0,I=0,w=0,k=0,E=0;function j(n){n.shift();for(let r=1;r<=n.length;r++){const e=n[r-1][0],t=n[r-1][1];document.querySelector(`.column[data-coord="${e}${t}"]`).textContent=r}}function S(){C=0,I=0,w=0,k=0,E=0,display.textContent="Position your knight...";for(let n=1;n<=8;n++)for(let r=1;r<=8;r++)document.querySelector(`.column[data-coord="${n}${r}"]`).textContent=""}x.innerHTML='\n    <header>\n        <h1>Knights Travails</h1>\n        <h2 id="display">Position your knight...</h2>\n        <button id="reset">RESET</button>\n    </header>\n    <main>\n        <div id="board">\n        </div>\n    </main>\n    ',function(){let n="";for(let r=1;r<=8;r++){n+="<div class='row'>";for(let e=1;e<=8;e++)n+=`<div class='column' data-coord='${r}${e}'></div>`;n+="</div>"}board.innerHTML=n}(),function(){let n=document.querySelector("head"),r=document.createElement("link");r.setAttribute("rel","shortcut icon"),r.setAttribute("href",h),n.appendChild(r)}(),function(){for(let n=1;n<=8;n++)for(let r=1;r<=8;r++){const e=document.querySelector(`.column[data-coord="${n}${r}"]`);e.onclick=()=>{if(0===E)C=n,I=r,e.textContent="♘",display.textContent="Select the destination...",E+=1;else if(1===E){w=n,k=r;const e=B(m(C,I,w,k));display.textContent=`It took the knight ${e.length-1} move(s).`,j(e),E+=1}}}reset.onclick=S}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,